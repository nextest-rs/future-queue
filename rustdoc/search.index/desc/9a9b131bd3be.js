rd_("BfThe function to obtain the future fromBgThe function to obtain the future from.AoThe associated key lookup type.CdThe type of successful values yielded by this future000ClCreate a future that is immediately ready with a success \xe2\x80\xa6BgFuture for the <code>all</code> method.BgFuture for the <code>any</code> method.BgFuture for the <code>map</code> method.BgStream for the <code>map</code> method.BgStream for the <code>zip</code> method.DkExecute predicate over asynchronous stream, and return <code>true</code>\xe2\x80\xa6000CkCreate a future that is immediately ready with an error \xe2\x80\xa6CjAn implementation of the Fowler\xe2\x80\x93Noll\xe2\x80\x93Vo hash function.CmReturn a reference to the value associated with the given \xe2\x80\xa6BjReturn the key associated with this entry.CeReturns the number of futures contained in the queue.CcReturns the number of streams contained in the set.CcReturns the number of futures contained in the set.BcReturn the number of stored values.CmMap this future\xe2\x80\x99s output to a different type, returning \xe2\x80\xa60CmMaps this stream\xe2\x80\x99s items to a different type, returning \xe2\x80\xa60ChReturns a locked view over a portion of the locked data.0DcCreate a <code>LocalFutureObj</code> from a custom trait object \xe2\x80\xa6CnCreate a <code>FutureObj</code> from a custom trait object \xe2\x80\xa6DgCreate a new <code>WakerRef</code> from a <code>Waker</code> reference.21DhCreates a new <code>Abortable</code> future/stream using an existing \xe2\x80\xa6BcCreate an <code>AtomicWaker</code>.2CcConstructs a new, empty <code>FuturesOrdered</code>BnConstructs a new, empty <code>SelectAll</code>CfConstructs a new, empty <code>FuturesUnordered</code>.BbCreates a new futures-aware mutex.BiConstruct a new, empty <code>Slab</code>.BlAn adapter for zipping two streams together.0BbThe output of the completed future0BhFuture for the <code>fold</code> method.BhFuture for the <code>fuse</code> method.BhStream for the <code>fuse</code> method.DkThe empty variant after the result of a <code>MaybeDone</code> has been \xe2\x80\xa6DiThe empty variant after the result of a <code>TryMaybeDone</code> has \xe2\x80\xa6AmValues yielded by the stream.0BjStream for the <code>iter</code> function.ClImmutable iterator over all the futures in the unordered \xe2\x80\xa6CiImmutable iterator over all streams in the unordered set.CkAn iterator over the values stored in the <code>Slab</code>BjFuture for the <code>join</code> function.BjFuture for the <code>lazy</code> function.AhFirst branch of the typeAfPoll the first stream.BhFuture for the <code>next</code> method.CaA stream which emits single element and then EOF.CbFuture for the <code>Peekable::peek</code> method.BhStream for the <code>scan</code> method.BhStream for the <code>skip</code> method.BmPre-allocated storage for a uniform data typeBhStream for the <code>take</code> method.BhFuture for the <code>then</code> method.BhStream for the <code>then</code> method.CfDrops the future represented by the given fat pointer.00CkExecute an accumulating asynchronous computation over a \xe2\x80\xa60AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DhFuse a future such that <code>poll</code> will never again be called \xe2\x80\xa60DfFuse a stream such that <code>poll_next</code> will never again be \xe2\x80\xa60BaCalls <code>U::from(self)</code>.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000EfConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready \xe2\x80\xa6CmReturns an iterator that allows inspecting each stream in \xe2\x80\xa6CmReturns an iterator that allows inspecting each future in \xe2\x80\xa6BaReturn an iterator over the slab.CmJoins the result of two futures, waiting for them both to \xe2\x80\xa6CkCreates a new future that allows delayed execution of a \xe2\x80\xa6BkFutures-powered synchronization primitives.B`Acquire the lock asynchronously.CjCreates a future that resolves to the next item in the \xe2\x80\xa60BeCreates a stream of a single element.EdReturns <code>Some</code> containing a reference to this <code>Shared</code>\xe2\x80\x99s \xe2\x80\xa6CmProduces a future which retrieves a reference to the next \xe2\x80\xa6AmPush a future into the queue.AkPush a stream into the set.AkPush a future into the set.DjCombinator similar to <code>StreamExt::fold</code> that holds internal \xe2\x80\xa60DkCreates a new stream which skips <code>n</code> items of the underlying \xe2\x80\xa60BnPre-allocated storage for a uniform data type.EdReturns the last <code>Waker</code> passed to <code>register</code>, so that the \xe2\x80\xa6DjCreates a new stream of at most <code>n</code> items of the underlying \xe2\x80\xa60AbTask notification.AmTools for working with tasks.CnChain on a computation for when a future finished, passing \xe2\x80\xa60CfComputes from this stream\xe2\x80\x99s items new items of a \xe2\x80\xa60CgIndicates that the associated task is ready to make \xe2\x80\xa600EgCalls <code>wake</code> on the last <code>Waker</code> passed to <code>register</code>.BiStream for the <code>chain</code> method.BiFuture for the <code>count</code> method.BiStream for the <code>cycle</code> method.BiA draining iterator for <code>Slab</code>BkStream for the <code>empty</code> function.BkThe type of failures yielded by this future000BkFuture for the <code>join3</code> function.BkFuture for the <code>join4</code> function.BkFuture for the <code>join5</code> function.BjFuture for the <code>map_ok</code> method.BjStream for the <code>map_ok</code> method.AfA futures-aware mutex.AoA type with no possible values.BkFuture for the <code>ready</code> function.AiSecond branch of the typeAgPoll the second stream.DcThe <code>Spawn</code> trait allows for pushing futures onto an \xe2\x80\xa60BiFuture for the <code>unzip</code> method.DgAbort the <code>Abortable</code> stream/future associated with this \xe2\x80\xa6BeWrap the future in a Box, pinning it.0BeWrap the stream in a Box, pinning it.0BaAdapter for chaining two streams.0BeClears the set, removing all streams.BeClears the set, removing all futures.AmClear the slab of all values.CkDrives the stream to completion, counting the number of \xe2\x80\xa60AkRepeats a stream endlessly.0CmReturn a draining iterator that removes all elements from \xe2\x80\xa6BlCreates a stream which contains no elements.CaSame as <code>join</code>, but with more futures.00CaThis module contains the <code>Never</code> type.CmExtracts the successful type of a <code>Poll&lt;T&gt;</code>.0ChCreates a future that is immediately ready with a value.DhSpawns a task that polls the given future with output <code>()</code> to0ClConverts a stream of pairs into a future, which resolves \xe2\x80\xa60DjCreates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.0BjStream for the <code>chunks</code> method.BjFuture for the <code>concat</code> method.ClCombines two different futures, streams, or sinks having \xe2\x80\xa6BjStream for the <code>filter</code> method.BhThe associated <code>Future</code> type.0AjA not-yet-completed future0BkFuture for the <code>map_err</code> method.BkStream for the <code>map_err</code> method.CeFuture for the <code>Peekable::next_if</code> method.BkFuture for the <code>ok_into</code> method.BkFuture for the <code>or_else</code> method.BkStream for the <code>or_else</code> method.BmFuture for the <code>poll_fn</code> function.BmStream for the <code>poll_fn</code> function.BlStream for the <code>repeat</code> function.BnFuture for the <code>select()</code> function.BnStream for the <code>select()</code> function.BjFuture for the <code>shared</code> method.BkA stream of values produced asynchronously.0BkFuture for the <code>try_all</code> method.BkFuture for the <code>try_any</code> method.BlStream for the <code>unfold</code> function.BkBorrows a stream, rather than consuming it.0CkAn adaptor for chunking up items of the stream inside a \xe2\x80\xa60CnConcatenate all items of a stream into a single extendable \xe2\x80\xa60CkFilters the values produced by this stream according to \xe2\x80\xa60hFutures.AdAsynchronous values.EaCreate an <code>AbortHandle</code> from the given <code>AbortRegistration</code>.CmInsert a value in the slab, returning key assigned to the \xe2\x80\xa6CnInsert a value in the entry, returning a mutable reference \xe2\x80\xa6BgGet the key for an element in the slab.ChMaps this future\xe2\x80\x99s success value to a different value.0CkWraps the current stream in a new stream which maps the \xe2\x80\xa60EfReturns <code>true</code> if the two <code>Shared</code>s point to the same future \xe2\x80\xa6CjRemove and return the value associated with the given key.ChCreate a stream which produces the same item repeatedly.CdRetain only the elements specified by the predicate.ClWaits for either one of two differently-typed futures to \xe2\x80\xa6CfThis function will attempt to pull items from both \xe2\x80\xa6CnCreate a cloneable handle to this future where all handles \xe2\x80\xa60CkDetermines whether the executor is able to spawn new tasks.00AeAsynchronous streams.0BhToggle the value and return the old one.BbTraits to aid in type definitions.DgCreates a <code>Stream</code> from a seed and a closure returning a \xe2\x80\xa6AiThe weight of the future.AcReturns the weight.CkIndicator that the <code>Abortable</code> task was aborted.0BlFuture for the <code>and_then</code> method.BlStream for the <code>and_then</code> method.BcA way of waking up a specific task.0BkFuture for the <code>collect</code> method.BlFuture for the <code>err_into</code> method.BlStream for the <code>err_into</code> method.BlStream for the <code>flat_map</code> method.BkFuture for the <code>flatten</code> method.BkStream for the <code>flatten</code> method.BlFuture for the <code>for_each</code> method.BkFuture for the <code>inspect</code> method.BkStream for the <code>inspect</code> method.CgMutable iterator over all futures in the unordered set.CgMutable iterator over all streams in the unordered set.DbA mutable iterator over the values stored in the <code>Slab</code>BnFuture for the <code>join_all</code> function.C`Future for the <code>map_into</code> combinator.CfFuture for the <code>Peekable::peek_mut</code> method.BoFuture for the <code>pending()</code> function.BoStream for the <code>pending()</code> function.BlFuture for the <code>try_fold</code> method.BnFuture for the <code>try_join</code> function.BlFuture for the <code>try_next</code> method.CmTransforms a stream into a collection, returning a future \xe2\x80\xa60CmReduce the capacity as much as possible, changing the key \xe2\x80\xa6CkFlatten the execution of this future when the output of \xe2\x80\xa60CiFlattens a stream of streams into just one continuous \xe2\x80\xa60CjAcquires a mutable reference to the underlying sink or \xe2\x80\xa6000000CnAcquires a mutable reference to the underlying stream that \xe2\x80\xa61111111111CjAcquires a mutable reference to the underlying streams \xe2\x80\xa62222222222222222222222222CkAcquires a mutable reference to the underlying iterator \xe2\x80\xa611CcReturns a mutable reference to the underlying data.CkReturn a mutable reference to the value associated with \xe2\x80\xa6CnAcquires a reference to the underlying sink or stream that \xe2\x80\xa6000000CkAcquires a reference to the underlying stream that this \xe2\x80\xa61111111111ClAcquires a reference to the underlying streams that this \xe2\x80\xa62222222222222222222222222CmAcquires a reference to the underlying iterator that this \xe2\x80\xa611CnDo something with the output of a future before passing it \xe2\x80\xa60CjDo something with each item of this stream, afterwards \xe2\x80\xa60CjReturns whether the underlying stream has finished or not.CfMaps this future\xe2\x80\x99s error value to a different value.0CkWraps the current stream in a new stream which maps the \xe2\x80\xa60CkCreates a future which will consume and return the next \xe2\x80\xa6EeMaps this future\xe2\x80\x99s <code>Ok</code> to a new type using the <code>Into</code> trait.0CmExecutes another future if this one resolves to an error. \xe2\x80\xa60CmChain on a computation for when an error happens, passing \xe2\x80\xa60CiCreates a future which never resolves, representing a \xe2\x80\xa6CbCreates a stream which never returns any elements.AjPins a value on the stack.0CmCreates a new future wrapping around a function returning \xe2\x80\xa6CfCreates a new stream wrapping a function returning \xe2\x80\xa6DkReserve capacity for at least <code>additional</code> more values to be \xe2\x80\xa6CnAttempt to execute a predicate over an asynchronous stream \xe2\x80\xa6000DlAttempts to upgrade this <code>WeakShared</code> into a <code>Shared</code>.BlStream for the <code>buffered</code> method.CeOwned iterator over all futures in the unordered set.CeOwned iterator over all streams in the unordered set.DbA consuming iterator over the values stored in a <code>Slab</code>ChFuture for the <code>Peekable::next_if_eq</code> method.DaA <code>Stream</code> that implements a <code>peek</code> method.DgType to tell <code>SelectWithStrategy</code> which stream to poll next.BoFuture for the <code>select_ok</code> function.BgExtension trait for <code>Spawn</code>.BoFuture for the <code>try_join3</code> function.BoFuture for the <code>try_join4</code> function.BoFuture for the <code>try_join5</code> function.CmA <code>Waker</code> that is only valid for a given lifetime.0CcExecutes another future after this one resolves \xe2\x80\xa60CmChain on a computation for when a value is ready, passing \xe2\x80\xa60CkAn adaptor for creating a buffered list of pending futures.0CjReturn the number of values the slab can store without \xe2\x80\xa6DeReturn <code>true</code> if a value is associated with the given key.DiMaps this future\xe2\x80\x99s <code>Error</code> to a new error type using the \xe2\x80\xa60CkWraps the current stream in a new stream which converts \xe2\x80\xa60DfMaps a stream like <code>StreamExt::map</code> but flattens nested \xe2\x80\xa60CjRuns this stream to completion, executing the provided \xe2\x80\xa60CjReturn two mutable references to the values associated \xe2\x80\xa6CmConvert an owned instance into a (conceptually owned) fat \xe2\x80\xa600CjReturns <code>true</code> if the queue contains no futuresChReturns <code>true</code> if the set contains no streamsCiReturns <code>true</code> if the set contains no futures.DcReturn <code>true</code> if there are no values stored in the slab.ClReturns an iterator that allows modifying each stream in \xe2\x80\xa6ClReturns an iterator that allows modifying each future in \xe2\x80\xa6CdReturn an iterator that allows modifying each value.CiCreates a future which represents a collection of the \xe2\x80\xa6CmMap this future\xe2\x80\x99s output to a different type, returning \xe2\x80\xa60EhCreates an (<code>AbortHandle</code>, <code>AbortRegistration</code>) pair which can \xe2\x80\xa6ClProduces a future which retrieves a mutable reference to \xe2\x80\xa6CnCreates a new stream which exposes a <code>peek</code> method.0DkHashes the internal state of this <code>Shared</code> in a way that\xe2\x80\x99s \xe2\x80\xa6DaRegisters the waker to be notified on calls to <code>wake</code>.ChSpawning failed because the executor has been shut down.0CcAttempt to execute an accumulating asynchronous \xe2\x80\xa60CmJoins the result of two futures, waiting for them both to \xe2\x80\xa6BhAttempt to acquire the lock immediately.CnCreates a future that attempts to resolve the next item in \xe2\x80\xa60DePoll this <code>TryFuture</code> as if it were a <code>Future</code>.0ClCreate an FNV hasher starting with a state corresponding \xe2\x80\xa6CiA future/stream which can be remotely short-circuited \xe2\x80\xa60DiAn owned dynamically typed <code>Future</code> for use in cases where \xe2\x80\xa60DiAn owned dynamically typed <code>Stream</code> for use in cases where \xe2\x80\xa60BmStream for the <code>enumerate</code> method.BnStream for the <code>filter_map</code> method.CjAn implementation of the Fowler\xe2\x80\x93Noll\xe2\x80\x93Vo hash function.DjAn extension trait for <code>Future</code>s that provides a variety of \xe2\x80\xa6CnA custom trait object for polling futures, roughly akin to \xe2\x80\xa600BnFuture for the <code>inspect_ok</code> method.BnStream for the <code>inspect_ok</code> method.BaA future that may have completed.AkAn unbounded set of streamsC`Future for the <code>select_all</code> function.1BnStream for the <code>skip_while</code> method.EdAn extension trait for <code>Stream</code>s that provides <code>future_queue</code>.DjAn extension trait for <code>Stream</code>s that provides a variety of \xe2\x80\xa6BnStream for the <code>take_until</code> method.BnStream for the <code>take_while</code> method.BnStream for the <code>try_chunks</code> method.BnFuture for the <code>try_concat</code> method.BnStream for the <code>try_filter</code> method.DiA convenience for futures that return <code>Result</code> values that \xe2\x80\xa60CbFuture for the <code>try_select()</code> function.DiA convenience for streams that return <code>Result</code> values that \xe2\x80\xa60C`Stream for the <code>try_unfold</code> function.CbFuture for the <code>unit_error</code> combinator.EeCreates a new <code>Abortable</code> future and an <code>AbortHandle</code> which \xe2\x80\xa6EeCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which \xe2\x80\xa6DcCreates a new <code>WeakShared</code> for this <code>Shared</code>.ClCreates a stream which gives the current iteration count \xe2\x80\xa60AeUtilities for pinningCfAttempt to pull out the next value of this stream, \xe2\x80\xa60CjPeek retrieves a reference to the next item in the stream.BiPushes a future to the back of the queue.CdCreates a new future which will select the first \xe2\x80\xa6CiReturns the bounds on the remaining length of the stream.0BoSpawns a future that will be run to completion.0CeSame as <code>try_join</code>, but with more futures.00DcCreates a reference to a <code>Waker</code> from a reference to \xe2\x80\xa60CbA <code>HashMap</code> using a default FNV hasher.CbA <code>HashSet</code> using a default FNV hasher.BoFuture for the <code>inspect_err</code> method.BoStream for the <code>inspect_err</code> method.BoFuture for the <code>into_future</code> method.BoStream for the <code>into_stream</code> method.0CgMutable iterator over all futures in the unordered set.CiImmutable iterator over all futures in the unordered set.EeThe <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning \xe2\x80\xa60EfAn RAII guard returned by the <code>lock</code> and <code>try_lock</code> methods. \xe2\x80\xa6CcFuture for the <code>never_error</code> combinator.DgAn stream that repeats elements of type <code>A</code> endlessly by \xe2\x80\xa6BgAn error that occurred during spawning.0BoFuture for the <code>try_collect</code> method.BoFuture for the <code>try_flatten</code> method.BoStream for the <code>try_flatten</code> method.C`Future for the <code>try_for_each</code> method.CbFuture for the <code>try_join_all</code> function.DgA weak reference to a <code>Shared</code> that can be upgraded much \xe2\x80\xa6DbConvert <code>Pin&lt;&amp;mut Either&lt;A, B&gt;&gt;</code> to \xe2\x80\xa6GoConvert <code>Pin&lt;&amp;Either&lt;A, B&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;A&gt;, Pin&lt;&amp;B&gt;&gt;</code>, \xe2\x80\xa6CdFilters the values produced by this stream while \xe2\x80\xa60CnReturns a group slot number: an integer that is unique for \xe2\x80\xa6CjDo something with the success value of a future before \xe2\x80\xa60CgDo something with the success value of this stream, \xe2\x80\xa60CnConsumes this combinator, returning the underlying sink or \xe2\x80\xa60CeUnwraps the value from this immediately ready future.CkConsumes this combinator, returning the underlying futures.CiExtract the value of an either over two equivalent types.33333CjConsumes this combinator, returning the underlying stream.4444444444CkConsumes this combinator, returning the underlying streams.5555555555555555555555555ChConsumes this stream, returning the underlying iterator.11CcConsumes this mutex, returning the underlying data.CkChecks whether the task has been aborted. Note that all \xe2\x80\xa6DmChecks whether <code>AbortHandle::abort</code> was <em>called</em> on any \xe2\x80\xa6CmWhether the stream was stopped yet by the stopping future \xe2\x80\xa6B`Acquire the lock asynchronously.CnReturns the maximum weight of futures allowed to be run by \xe2\x80\xa6BlWraps a future into a <code>MaybeDone</code>CkCreates a future which will consume and return the next \xe2\x80\xa6EbCreate a new <code>Waker</code> which does nothing when <code>wake()</code> is \xe2\x80\xa60DhReturns an <code>Option</code> containing a mutable reference to the \xe2\x80\xa60EdA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future \xe2\x80\xa60BjPushes a future to the front of the queue.CiCreates a new future which will select over a list of \xe2\x80\xa6DhConvert a list of streams into a <code>Stream</code> of results from \xe2\x80\xa60AkAn unbounded set of streamsCcSkip elements on this stream while the provided \xe2\x80\xa60ClTake elements from this stream until the provided future \xe2\x80\xa60CeTake elements from this stream while the provided \xe2\x80\xa60DcCreates a new <code>Fuse</code>-wrapped future which is already \xe2\x80\xa6CmAn adaptor for chunking up successful items of the stream \xe2\x80\xa60CnAttempt to concatenate all items of a stream into a single \xe2\x80\xa60ChAttempt to filter the values produced by this stream \xe2\x80\xa60ClTries to remove the value associated with the given key, \xe2\x80\xa6ClWaits for either one of two differently-typed futures to \xe2\x80\xa6DjCreates a <code>TryStream</code> from a seed and a closure returning a \xe2\x80\xa6ChTurns a <code>Future&lt;Output = T&gt;</code> into a \xe2\x80\xa60BiReturns the key of the next vacant entry.CdGets the number of weak pointers to this allocation.BkA handle to an <code>Abortable</code> task.0CbFuture for the <code>always_ready</code> function.BlA synchronization primitive for task wakeup.C`Future for the <code>catch_unwind</code> method.C`Stream for the <code>catch_unwind</code> method.ChA newtype wrapper that causes the field within to be \xe2\x80\xa6CnA future which tracks whether or not the underlying future \xe2\x80\xa60CnA stream which tracks whether or not the underlying stream \xe2\x80\xa60C`Stream for the <code>future_queue</code> method.CbFuture for the <code>map_ok_or_else</code> method.C`Stream for the <code>ready_chunks</code> method.C`Stream for the <code>try_buffered</code> method.CbA handle to a vacant entry in a <code>Slab</code>.BeWrap the future in a Box, pinning it.0BeWrap the stream in a Box, pinning it.0CnAcquires a pinned mutable reference to the underlying sink \xe2\x80\xa6000000CiAcquires a pinned mutable reference to the underlying \xe2\x80\xa611111111110111111111111111111111111100CkReturns a global slot number: an integer that is unique \xe2\x80\xa6ChDo something with the error value of a future before \xe2\x80\xa60CeDo something with the error value of this stream, \xe2\x80\xa60DoWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.0BiConverts this stream into a future of \xe2\x80\xa60CaConvert this future into a single element stream.0DnWraps a <code>TryStream</code> into a type that implements <code>Stream</code>0ClCheck whether spawning failed to the executor being shut \xe2\x80\xa60DdWrap this future in an <code>Either</code> future, making it the \xe2\x80\xa60DdWrap this stream in an <code>Either</code> stream, making it the \xe2\x80\xa60ChTurns a <code>Future&lt;Output = T&gt;</code> into a \xe2\x80\xa60EaCreate a new <code>WakerRef</code> from a <code>Waker</code> that must not be \xe2\x80\xa60CkA macro that creates a projection type covering all the \xe2\x80\xa6DeCreates a new stream that repeats elements of type <code>A</code> \xe2\x80\xa6DhSpawns a task that polls the given future with output <code>()</code> to0CjExtract the stopping future out of the combinator. The \xe2\x80\xa6DjAttempt to take the output of a <code>MaybeDone</code> without driving \xe2\x80\xa6DeAttempt to take the output of a <code>TryMaybeDone</code> without \xe2\x80\xa6ClOnce the stopping future is resolved, this method can be \xe2\x80\xa6CnAttempt to transform a stream into a collection, returning \xe2\x80\xa60ClFlatten the execution of this future when the successful \xe2\x80\xa60CiFlattens a stream of streams into just one continuous \xe2\x80\xa60CgIndicates that the associated task is ready to make \xe2\x80\xa60CiA future representing a value which may or may not be \xe2\x80\xa6BoFuture for the <code>into_future</code> method.CbStream for the <code>try_filter_map</code> method.CjAdapters specific to <code>Result</code>-returning futuresBoA future that may have completed with an error.CbStream for the <code>try_skip_while</code> method.CjAdapters specific to <code>Result</code>-returning streamsCbStream for the <code>try_take_while</code> method.CbFuture for the <code>unwrap_or_else</code> method.ClCreates a future that is always immediately ready with a \xe2\x80\xa6CbCatches unwinding panics while polling the future.0CbCatches unwinding panics while polling the stream.0DjThis library contains <code>DebugIgnore</code>, a newtype wrapper that \xe2\x80\xa6CfFactor out a homogeneous type from an either of pairs.Co<code>future_queue</code> provides ways to run several futures:CfAn adaptor for creating a queue of pending futures \xe2\x80\xa6CjCore traits and types for asynchronous operations in Rust.AmTools for working with tasks.EgCombinators and utilities for working with <code>Future</code>s, <code>Stream</code>\xe2\x80\xa6ClReturns an iterator that allows modifying each future in \xe2\x80\xa6CmReturns an iterator that allows inspecting each future in \xe2\x80\xa6CnEvaluates and consumes the future, returning the resulting \xe2\x80\xa60ChAn adaptor for chunking up ready items of the stream \xe2\x80\xa60DdWrap this future in an <code>Either</code> future, making it the \xe2\x80\xa60DdWrap this stream in an <code>Either</code> stream, making it the \xe2\x80\xa60CkDetermines whether the executor is able to spawn new tasks.00CfGets the number of strong pointers to this allocation.CdAttempt to execute several futures from a stream \xe2\x80\xa60ClAttempts to run this stream to completion, executing the \xe2\x80\xa60ClCreates a future which represents either a collection of \xe2\x80\xa6CjReturn a handle to a vacant entry allowing for further \xe2\x80\xa6CbStream for the <code>flatten_stream</code> method.BlExtension trait for <code>LocalSpawn</code>.CdFuture for the <code>poll_immediate</code> function.BgStream for the poll_immediate function.CfFactor out a homogeneous type from an either of pairs.CmReturn a reference to the value associated with the given \xe2\x80\xa6DjReturns <code>true</code> if the underlying future should no longer be \xe2\x80\xa6DcReturns <code>true</code> if the stream should no longer be polled.10CnPeek retrieves a mutable reference to the next item in the \xe2\x80\xa6CjReserve the minimum capacity required to store exactly \xe2\x80\xa6CgShrink the capacity of the slab as much as possible \xe2\x80\xa6DePoll this <code>TryStream</code> as if it were a <code>Stream</code>.0BfA pinned projection of a struct field.DeConstruct a new, empty <code>Slab</code> with the specified capacity.BbA builder for default FNV hashers.AnAn unbounded queue of futures.Df<code>BoxFuture</code>, but without the <code>Send</code> requirement.0Df<code>BoxStream</code>, but without the <code>Send</code> requirement.0CnA custom trait object for polling futures, roughly akin to \xe2\x80\xa600CdFuture for the <code>select_next_some</code> method.CjError indicating, that while chunk was collected inner \xe2\x80\xa6CdStream for the <code>try_ready_chunks</code> method.DkA trait for types which can be converted into a <code>Future</code> and \xe2\x80\xa6C`Returns the currently running weight of futures.ClFlatten the execution of this future when the successful \xe2\x80\xa60ClMaps this future\xe2\x80\x99s success value to a different value, \xe2\x80\xa60DjGet a static reference to a <code>Waker</code> which does nothing when \xe2\x80\xa60CmCreates a future that is immediately ready with an Option \xe2\x80\xa6ChCreates a new stream that always immediately returns \xe2\x80\xa6CnAttempt to filter the values produced by this stream while \xe2\x80\xa60BhAttempt to acquire the lock immediately.BoWraps a future into a <code>TryMaybeDone</code>DhA convenience method for calling <code>TryFuture::try_poll</code> on \xe2\x80\xa60CcSkip elements on this stream while the provided \xe2\x80\xa60CcTake elements on this stream while the provided \xe2\x80\xa60CkUnwraps this future\xe2\x80\x99s output, producing a future with \xe2\x80\xa60CdStream for the <code>buffer_unordered</code> method.CjA future which resolves when the target mutex has been \xe2\x80\xa6EhAn RAII guard returned by the <code>lock_owned</code> and <code>try_lock_owned</code>\xe2\x80\xa6ChA custom implementation of a future trait object for \xe2\x80\xa600AoTurns self into its components.0DgConverts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.0EeA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>0BoSpawns a future that will be run to completion.0BiAn unpinned projection of a struct field.CfStream for the <code>flat_map_unordered</code> method.CeStream for the <code>flatten_unordered</code> method.CaA set of futures which may complete in any order.0DbAn RAII guard returned by the <code>MutexGuard::map</code> and \xe2\x80\xa6CfFuture for the <code>try_flatten_stream</code> method.CnAn adaptor for creating a buffered list of pending futures \xe2\x80\xa60CkReturns the maximum weight of futures allowed to be run \xe2\x80\xa6CeA lightweight version of pin-project written with \xe2\x80\xa6DjReturns a <code>Future</code> that resolves when the next item in this \xe2\x80\xa60CmAn adaptor for chunking up successful, ready items of the \xe2\x80\xa60DgA registration handle for an <code>Abortable</code> task. Values of \xe2\x80\xa60CgFuture for the <code>for_each_concurrent</code> method.CiFlattens a stream of streams into just one continuous \xe2\x80\xa60AlAn unbounded set of futures.CkReturn a mutable reference to the value associated with \xe2\x80\xa6CnReturns the maximum weight of futures allowed to be run by \xe2\x80\xa6CkContext for a function in a <code>FutureQueue</code> or \xe2\x80\xa6ChStream for the <code>future_queue_grouped</code> method.DdStream for the <code>select_with_strategy()</code> function. See \xe2\x80\xa6ChStream for the <code>try_buffer_unordered</code> method.DfMaps a stream like <code>StreamExt::map</code> but flattens nested \xe2\x80\xa60CjReturn two mutable references to the values associated \xe2\x80\xa6ClFlatten the execution of this future when the successful \xe2\x80\xa60CiStream for the <code>try_flatten_unordered</code> method.CjError indicating, that while chunk was collected inner \xe2\x80\xa6CjRuns this stream to completion, executing the provided \xe2\x80\xa60DjA convenience method for calling <code>TryStream::try_poll_next</code> \xe2\x80\xa60CjA future which resolves when the target mutex has been \xe2\x80\xa6CkFuture for the <code>try_for_each_concurrent</code> method.CjReturns the current weight of futures being run within \xe2\x80\xa6CmAn adaptor for creating a queue of pending futures, where \xe2\x80\xa6CfThis function will attempt to pull items from both \xe2\x80\xa6CdAttempt to execute several futures from a stream \xe2\x80\xa60CkA trait for types which can be converted into functions \xe2\x80\xa6BmReturns the current global weight of futures.CiFlattens a stream of streams into just one continuous \xe2\x80\xa60ClAttempts to run this stream to completion, executing the \xe2\x80\xa60")